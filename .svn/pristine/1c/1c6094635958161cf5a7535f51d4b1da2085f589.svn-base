package Calendar;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;

import Common.CommonData;

public class DetailDiaryDAO {

	final private String jdbc_class = CommonData.getJdbc_Class();
	final private String jdbc_url= CommonData.getJdbc_Url();
	final private String DB_ID = CommonData.getDB_ID();
	final private String DB_PW = CommonData.getDB_PW();
	
	Connection conn; 
	PreparedStatement pstmt; 

	public void Open() {
		try {
			Class.forName(jdbc_class);
			conn=DriverManager.getConnection(jdbc_url,DB_ID,DB_PW);
			System.out.println("DB Connection Success");
		}catch(Exception e) {
			e.printStackTrace();
		}				
	}

	public void Close() {
		try {
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
	
	//상세 일기 정보 데이터 받아오기
	public DiaryDTO DetailDiary(int userNO, int diaryID, String diaryDate){
		
		Open(); 
		//상세 일기 정보 쿼리   STR_TO_DATE 문자를 Date 형식으로 변경함
		String sql= "SELECT diary_DT, diary_title, diary_text, notify_check FROM TBL_DIARY WHERE user_NO=? AND diary_ID=? AND diary_DT = STR_TO_DATE(?,?)";
		DiaryDTO dto = new DiaryDTO();
		
		try {
			//다이어리 데이터 가져오기
			pstmt= conn.prepareStatement(sql);
			pstmt.setInt(1,userNO);
			pstmt.setInt(2,diaryID);
			pstmt.setString(3,diaryDate);
			pstmt.setString(4,"%Y-%m-%d"); //STR_TO_DATE(x,y) 문자를 시간으로 변경,  x를 y의 형식으로 변경함
			
			ResultSet rs= pstmt.executeQuery();
			if(rs.next()) {
				dto.setDiaryDate(rs.getString("diary_DT"));
				dto.setDiaryTitle(rs.getString("diary_title"));
				dto.setDiaryContent(rs.getString("diary_text"));
				dto.setNotifyCheck(rs.getBoolean("notify_check"));
		
				rs.close();
			}else
			{
				System.out.println("검색된 다이어리가 없습니다.");
				return dto;
			}
			dto.setUserNO(userNO);
			dto.setDiaryID(diaryID);
			//사진 검색
			dto = DetailDiaryPhoto(dto);
			//알림 검색
			dto = DetailDiaryNotify(dto);
			
		}catch(SQLSyntaxErrorException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch(SQLDataException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch (SQLException e) {
			e.printStackTrace();
			dto=null;
		}finally {
			Close();
		}
		return dto;
	}
	//일기에 사진 정보를 가져온다.
	private DiaryDTO DetailDiaryPhoto(DiaryDTO dto) {
		//사진 쿼리
		String sql_photo = "SELECT photo_one, photo_two, photo_three, photo_four FROM TBL_PHOTO WHERE diary_ID=?";		
		try {
			//사진 데이터 가져오기
			pstmt= conn.prepareStatement(sql_photo);
			pstmt.setInt(1,dto.getDiaryID());	
			ResultSet rs_photo= pstmt.executeQuery();	
			
			if(rs_photo.next()) {
				dto.setPhotoOne(rs_photo.getString("photo_one"));
				dto.setPhotoTwo(rs_photo.getString("photo_two"));
				dto.setPhotoThree(rs_photo.getString("photo_three"));
				dto.setPhotoFour(rs_photo.getString("photo_four"));
				
				rs_photo.close();
			}else {
				System.out.println("검색된 사진이 없습니다.");
			}
		
		}catch(SQLSyntaxErrorException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch(SQLDataException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch (SQLException e) {
			e.printStackTrace();
			dto=null;
		}
		return dto;
	}
	//일기에 알림 정보를 가져온다.
	private DiaryDTO DetailDiaryNotify(DiaryDTO dto) {
		//알림 쿼리
		String sql_notify = "SELECT notify_ID ,notify_switch, notify_date, notify_time FROM TBL_NOTIFY WHERE user_NO=? AND diary_ID=?";
		try {
			
			pstmt = conn.prepareStatement(sql_notify);
			pstmt.setInt(1,dto.getUserNO());
			pstmt.setInt(2,dto.getDiaryID());
			ResultSet rs_notify= pstmt.executeQuery();
			
			if(rs_notify.next()) {
				dto.setNotifyID(rs_notify.getInt("notify_ID"));		
				dto.setNotifySwitch(rs_notify.getBoolean("notify_switch"));	
				dto.setNotifyDate(rs_notify.getDate("notify_date").toString());
				dto.setNotifyTime(rs_notify.getString("notify_time"));
				
				rs_notify.close();
			}else {
				System.out.println("검색된 알림이 없습니다.");
			}		
		}catch(SQLSyntaxErrorException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch(SQLDataException e) {
			e.printStackTrace(); //SQL 문 잘못됐을 경우
			dto=null;
		}catch (SQLException e) {
			e.printStackTrace();
			dto=null;
		}
		return dto;
	}
}
