package login;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import Common.CommonData;

// 카카오로그인을 할경우 해당 회원의 정보를 가져와 DB에 저장한다.
public class KakaoMemberDAO {

	final private String jdbc_class = CommonData.getJdbc_Class();
	final private String jdbc_url = CommonData.getJdbc_Url();
	final private String DB_ID = CommonData.getDB_ID();
	final private String DB_PW = CommonData.getDB_PW();

	Connection conn;
	PreparedStatement pstmt;
	ResultSet rs = null;

	// 데이터베이스 연결
	public void Open() {
		try {
			Class.forName(jdbc_class);
			conn = DriverManager.getConnection(jdbc_url, DB_ID, DB_PW);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 데이터베이스 연결 종료
	public void Close() {
		try {
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// 앱에서 온 Json데이터를 UserDO데이터에 저장한다.
	public UserDO JsonParser(String data) {
		UserDO user = new UserDO();
		try {
			JSONParser jsonParser = new JSONParser();
			JSONObject jsonObject = (JSONObject) jsonParser.parse(data);

			// 이메일
			user.setUser_email(jsonObject.get("user_email").toString());
			// 이름
			user.setUser_name(jsonObject.get("user_name").toString());
			// 프로필사진
			user.setUser_password(jsonObject.get("user_profile").toString());
			// 성별
			String usersex = jsonObject.get("user_sex").toString();
			if ("MALE".equals(usersex)) {
				user.setUser_sex("M");
			} else {
				user.setUser_sex("F");
			}
		} catch (Exception e) {
		}
		return user;
	}

	// 카카오로그인정보가 db에 존재할 경우 카카오자동로그인 때 중복해서 db와 연결하지 않도록 한다. 만약 존재한다면 userNO를 가져온다.
	public int OverlapKakaoEmailCheck(UserDO user) {
		Open();
		int returns = 0;
		try {
			String sql = "SELECT user_email,user_NO FROM TBL_USER WHERE user_email = ?";// 조회
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUser_email());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				// 이메일이 이미 데이터베이스에 존재할 경우
				returns = rs.getInt("user_NO");
			} else {
				// DB에 저장된 정보가 없다면 User정보를 DB에 저장한다.
				this.InsertKakaoUser(user);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			Close();
		}
		return returns;
	}

	// 카카오 유저정보 db에 삽입
	public void InsertKakaoUser(UserDO user) {
		Open();
		try {
			String sql = "INSERT INTO TBL_USER(user_email,user_NM,user_sex,user_profile) VALUES(?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUser_email());
			pstmt.setString(2, user.getUser_name());
			pstmt.setString(3, user.getUser_sex());
			pstmt.setString(4, user.getUser_password()); // 암호화된 프로필사진 url주소

			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Close();
		}
	}
}
