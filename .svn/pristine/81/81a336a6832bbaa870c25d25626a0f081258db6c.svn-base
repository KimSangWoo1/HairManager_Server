package login;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import Common.CommonData;

// 유저의 패스워드를 찾는 기능을 수행한다.
public class FindPasswordDAO {

	final private String jdbc_class = CommonData.getJdbc_Class();
	final private String jdbc_url = CommonData.getJdbc_Url();
	final private String DB_ID = CommonData.getDB_ID();
	final private String DB_PW = CommonData.getDB_PW();

	Connection conn;
	PreparedStatement pstmt;
	ResultSet rs = null;

	// 데이터베이스 연결
	public void Open() {
		try {
			Class.forName(jdbc_class);
			conn = DriverManager.getConnection(jdbc_url, DB_ID, DB_PW);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 데이터베이스 연결 종료
	public void Close() {
		try {
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// 앱에서 온 Json데이터를 UserDO데이터에 저장한다.
	public UserDO JsonParser(String data) {

		UserDO user = new UserDO();
		try {
			JSONParser jsonParser = new JSONParser();
			JSONObject jsonObject = (JSONObject) jsonParser.parse(data);

			user.setUser_email(jsonObject.get("user_email").toString());
			user.setUser_name(jsonObject.get("user_name").toString());
			user.setUser_phoneNO(jsonObject.get("user_phoneNO").toString());

		} catch (Exception e) {
		}
		return user;
	}

	// 수정
	public String MakeJson(String check, int userNO) {
		String result = null;

		HashMap<String, String> myHashMap = new HashMap<String, String>();

		if ("LO_0004".equals(check)) { // userNO가 존재하지 않거나 패스워드가 존재하지 않을 경우
			myHashMap.put("temppassword", "x");
			myHashMap.put("tempkey", "x");
			myHashMap.put("code", "LO_0004");
		} else { // userNO조회에 성공하고 패스워드가 존재할 경우
			PasswordDO pd = this.MakeTempPassword(); // 임시패스워드 생성

			if ("".equals(pd.getTemppassword())) { // 임시 패스워드 생성에 실패했을 경우
				myHashMap.put("temppassword", "x");
				myHashMap.put("tempkey", "x");
				myHashMap.put("code", "LO_0004");
			} else { // 임시 패스워드 생성에 성공했을 경우
				this.InsertTempPassword(pd, userNO);
				myHashMap.put("temppassword", pd.getTemppassword());
				myHashMap.put("tempkey", pd.getTempkey());
				myHashMap.put("code", "SY_2000");
			}
		}
		JSONObject object = new JSONObject(myHashMap); // head오브젝트와 body오브젝트를 담을 JSON오브젝트

		result = object.toString();

		return result;
	}

	// 앱에서 온 데이터와 일치하는 userNO가 있는지 DB에서 조회한다.
	public int SelectUserNO(UserDO user) {
		Open();
		int result = -1;
		try {
			String sql = "SELECT user_NO FROM TBL_USER WHERE user_email= ? AND user_NM = ? AND phone_NO = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUser_email());
			pstmt.setString(2, user.getUser_name());
			pstmt.setString(3, user.getUser_phoneNO());

			rs = pstmt.executeQuery();
			if (rs.next()) {
				if (rs.getFetchSize() > 1) {
					System.out.println("DB에 중복된 userNO가 존재합니다. 확인하세요.");
				} else {
					result = rs.getInt("user_NO");
				}
			} else {
				result = -1;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Close();
		}
		return result;
	}

	// 데이터베이스와 통신하여 해당 정보와 일치하는 패스워드가 있는지 확인한다.
	public String CheckPassword(int userNO) {
		Open();
		String returns = null;
		try {
			String sql = "SELECT password FROM TBL_USER_PRIVATE WHERE user_NO = ?";// 조회
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, userNO);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				// 패스워드가 데이터베이스에 존재할 경우
				returns = rs.getString("password");

			} else {
				returns = "LO_0004";
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			Close();
		}
		return returns;
	}

	// 임시 비밀번호 생성
	public PasswordDO MakeTempPassword() {
		PasswordDO pd = new PasswordDO();
		StringBuffer temp = new StringBuffer();
		Random rnd = new Random();
		for (int i = 0; i < 12; i++) {
			int rIndex = rnd.nextInt(3);
			switch (rIndex) {
			case 0:
				// a-z
				temp.append((char) ((int) (rnd.nextInt(26)) + 97));
				break;
			case 1:
				// A-Z
				temp.append((char) ((int) (rnd.nextInt(26)) + 65));
				break;
			case 2:
				// 0-9
				temp.append((rnd.nextInt(10)));
				break;
			}
		}
		// StringBuffer String형으로 변환
		String result = temp.toString();
		try {
			// 임시 비밀번호 암호화
			Crypto.aesKeyGen();
			pd.setTempkey(Crypto.secretKEY);
			pd.setTemppassword(Crypto.EncryptAES256(result));

		} catch (Exception e) {
		}
		return pd;
	}

	// 임시비밀번호와 임시비밀번호가 생성된 시간 DB에 저장
	public String InsertTempPassword(PasswordDO pd, int userNO) {
		Open();

		Date today = new Date(); // 임시 번호 생성되는 시간
		SimpleDateFormat simpledateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		Calendar cal = Calendar.getInstance();
		cal.setTime(today);
		cal.add(Calendar.HOUR, 24); // 임시 번호 만료기한 : 생성 시간으로부터 24시간
		String temptimeout = simpledateformat.format(cal.getTime());

		String result = "";
		try {
			String sql = "UPDATE TBL_USER_PRIVATE SET tempPassword=?, tempKey = ?, tempTimeOut = ? WHERE user_NO = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, pd.getTemppassword());
			pstmt.setString(2, pd.getTempkey());
			pstmt.setString(3, temptimeout);
			pstmt.setInt(4, userNO);

			pstmt.executeUpdate();
			result = "OK";
		} catch (SQLException e) {
			e.printStackTrace();
			result = "FAIL";
		} finally {
			Close();
		}
		return result;
	}
}
